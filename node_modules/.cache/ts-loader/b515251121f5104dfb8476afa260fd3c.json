{"remainingRequest":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\thread-loader\\dist\\cjs.js!D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\babel-loader\\lib\\index.js!D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\ts-loader\\index.js??ref--14-3!D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\src\\components\\Voive.ts","dependencies":[{"path":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\src\\components\\Voive.ts","mtime":499162500000},{"path":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615601873994},{"path":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1615601873990},{"path":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\babel-loader\\lib\\index.js","mtime":1615601874000},{"path":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\ts-loader\\index.js","mtime":1615707284305},{"path":"D:\\FrozenLemonTee\\Arbeit\\WebProject\\ciyana-button\\ciyana-button\\node_modules\\eslint-loader\\index.js","mtime":1615601886951}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}